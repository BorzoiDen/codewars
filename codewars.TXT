/=================================/
Write a function which converts the input string to uppercase.

function makeUpperCase(str) {
  return str.toUpperCase();
}
/=================================/


/=================================/
In this little assignment you are given a string of 
space separated numbers, and have to return the 
highest and lowest number.

function highAndLow(numbers) {
  let arr = numbers.split(' ');
  let max = Math.max(...arr);
  let min = Math.min(...arr);
  return max + ' ' + min;
}
/=================================/


/=================================/
Take 2 strings s1 and s2 including only letters from a to z.
 Return a new sorted string, the longest possible, containing
  distinct letters - each taken only once - coming from s1 or s2.

const longest = (s1, s2) => […new Set(s1+s2)].sort().join(‘’)
/=================================/


/=================================/


function boolToWord( bool ){
  return bool ? 'Yes':'No';
}
/=================================/


/=================================/

function openOrSenior(data){
  return data.map(dig => (dig[0] >= 55 && dig[1] > 7 ? 'Senior' : 'Open'));
}
/=================================/


/=================================/
Write a program that finds the summation of 
every number from 1 to num. The number will 
always be a positive integer greater than 0.

var summation = function (num) {
  let sum = 0;
  for(let i = 1; i < num + 1; i++){
    sum += i;
  }
  return sum;
}
/=================================/


/=================================/
Given an array of integers as strings and numbers, 
return the sum of the array values as if all were numbers.

function sumMix(x){
  let sum = 0;
  for(let i = 0; i < x.length; i++){
    sum += +x[i];
  }
  return sum;
}
/=================================/


/=================================/
The cockroach is one of the fastest insects. 
Write a function which takes its speed in km per hour 
and returns it in cm per second, rounded down to the 
integer (= floored).

function cockroachSpeed(s) {
  return Math.floor((s*(10**5))/3600);
}
/=================================/


/=================================/
Write function RemoveExclamationMarks which removes
 all exclamation marks from a given string.

function removeExclamationMarks(s) {
  let str = '';
  for(let i in s){
    if(s[i] == '!'){
      continue;
    }
    str += s[i];
  }
  return str;
}

function removeExclamationMarks(s) {
  let str = '';
  for(let i in s){
    if(s[i] != '!'){
      str += s[i];
    }
  }
  return str;
}
/=================================/


/=================================/
Your team is writing a fancy new text editor 
and you've been tasked with implementing the line numbering.

Write a function which takes a list of strings 
and returns each line prepended by the correct number.

The numbering starts at 1. The format is n: string. 
Notice the colon and space in between.

var number=function(array){
  let totalArr = [];
  for (let i = 0;  i < array.length; i++){
    totalArr.push(`${i+1}: ${array[i]}`);
  }
  return totalArr;
}
/=================================/


/=================================/
Implement a function which convert the given
 boolean value into its string representation.

function booleanToString(b){
  return `${b}`;
}
/=================================/


/=================================/
Given two integers a and b, which can be positive 
or negative, find the sum of all the integers 
between and including them and return it. If the
 two numbers are equal return a or b.

 function getSum( a,b ){
  if(a>b){
    [a,b] = [b,a];
  }
   let sum = 0;
  for (let i  = a; i < b + 1; i++){
    sum += i;
  }
  return sum;
}
/=================================/

/=================================/
You are given two interior angles (in degrees) of a triangle.
Write a function to return the 3rd.
Note: only positive integers will be tested.

function otherAngle(a, b) {
  return 180 - a - b;
}
/=================================/


/=================================/
Return the number (count) of vowels in the given string.
We will consider a, e, i, o, u as vowels for this Kata (but not y).
The input string will only consist of lower case letters and/or spaces.

function getCount(str) {
  let sum = 0;
  for (let i = 0; i < str.length; i++){
    if(str[i] == 'a' || str[i] == 'e' || str[i] == 'o' || str[i] == 'i' || str[i] == 'u' ){
      sum += 1;
    }
  }
  return sum;
}
/=================================/


/=================================/
Implement a function that adds two numbers 
together and returns their sum in binary. 
The conversion can be done before, or after the addition.
The binary number returned should be a string.

function addBinary(a,b) {
  return (a + b).toString(2);
}
/=================================/


/=================================/
In this simple assignment you are given 
a number and have to make it negative. 
But maybe the number is already negative?

function makeNegative(num) {
  return (num > 0 ? -num : num);
}
/=================================/


/=================================/
Implement a function that accepts 3 integer values a, b, c. 
The function should return true if a triangle
can be built with the sides of given length and false in any other case.

function isTriangle(a,b,c){
  if(a < b + c  && b < a + c && c < a + b){
    return true;
  }
   return false;
}
/=================================/


/=================================/

const binaryArrayToNumber = arr => {
  return parseInt(arr.join(''), 2);
};
/=================================/


/=================================/
Simple, remove the spaces from the string, 
then return the resultant string.

function noSpace(x){
  return x.replace(/\s/g, '');
}
/=================================/


/=================================/
In this kata you are required to, given a string, 
replace every letter with its position in the alphabet.
If anything in the text isn't a letter, ignore it and don't return it.

function alphabetPosition(text) {
   let mappedStr = '';
   text
   .trim()
   .toLowerCase()
   .split("")
   .forEach(char => {
      const ascii = char.charCodeAt();
      if(ascii >= 97 && ascii <= 122){
         mappedStr += (ascii - 96);
         mappedStr += " ";
      };
     });
  return mappedStr.trim();
}
/=================================/


/=================================/
Write a function that will return the count of distinct 
case-insensitive alphabetic characters and numeric digits 
that occur more than once in the input string. The input string 
can be assumed to contain only alphabets (both uppercase and lowercase) 
and numeric digits.

function duplicateCount(text){
 let miniArr = text.toLowerCase().split("")
  let alreadyFound = []
  let counter = 0
  for (let i = 0; i < miniArr.length; i++){
    let sliced = miniArr.slice(0,i)
    if(alreadyFound.includes(miniArr[i])){
      i++
      continue;
    } else if (sliced.includes(miniArr[i])){
      alreadyFound.push(miniArr[i])
      counter++
    }
  }
  return counter;
}
/=================================/


/=================================/
Nathan loves cycling.
Because Nathan knows it is important to stay 
hydrated, he drinks 0.5 litres of water per hour of cycling.
You get given the time in hours and you need
 to return the number of litres Nathan will drink, rounded to the smallest value.

function litres(time) {
  return Math.floor(time * 0.5);
}
/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/


/=================================/

/=================================/
